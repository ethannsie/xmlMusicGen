2025-05-05 11:18
* Jeff Heaton Code works
* Figure out how it works with the FFT
* Store the notes from each frame in a database to use for analysis

2025-05-06 11:37
* brew install ffmpeg
* ffmpeg -i input.mp3 output.wav
* brew install poppler
* pdftoppm -jpeg skyFullOfStars.pdf output-image

2025-05-07 15:37
* Code stores the top 8 that are above 1 standard deviation below the mean of each frame
* Will add blank notes for any below one standard standard deviation

2025-05-07 23:20
* Uses fluidsynth to generte piano noises
* Fixed matrix to be based on an initial steady state instead of one starting chord
* Graph seems complete for now? But may need to implement a similar method to page rank if I ever find a sink
* Tracks trajectory based on random initial state
* Need to look into more markov things and other ways to tweak this system
* Potentially training onto an artist as opposed to a songs



OVERALL THINGS TO DO
------------------------------
------------------------------
* Figure out how Fast Fourier Transform works
* Figure out good explanations for the sound library I used
* Break down the princeton row stochastic matrix
------------------------------------------------------------------------------------------



2025-05-19
* All of that is useless.
* FIX THE TOP STAFF

* Current project specs
  * Code takes XML data from Musescore. I can also decompress MusicXML Code
  * This XML data is read through an element tree and returns data from every measure
  * Using that data, I can create a list of nested lists that represent a musical score
  * A score consists of a list where each measure in the score is a list of 64 lists in the big list
  * The XML data is then spread throughout each 64th of a note based on duration and start time read from the XML
  * This allows for transition states between each 64th of a note which should account for both length

* Things to try:
  * Isolating bottom staff and top staff


2025-05-20
* Top staff fixed!

* Music generation is a lot better
* When a song is repetitive enough, it eventually results in a steady state fairly similar to the original song (moon river)
* Have an option for the audio to keep playing notes that are repeated (only when sequences are the same should it be held constant)
* Fix the flat generation so that it actually plays notes for flats

* FUNCTIONS TO IMPLEMENT
  * Try isolating bottom staff and top staff for separate matrix training
  * Try some matrix transformations on the existing bigram matrix
  *
  * Retrain matrix and a trigram (may not be as good due to lack of training data)
